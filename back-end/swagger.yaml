swagger: '2.0'
info:
  title: Bank Argent API documentation
  description: Contains all available API endpoints in this codebase
  version: '1.0.0'
  termsOfService: 'http://swagger.io/terms/'
host: localhost:3001
basePath: /api/v1
schemes:
  - http
paths:
  /user/login:
    post:
      tags:
        - User Module
      summary: Login
      description: API for Login
      parameters:
        - in: body
          name: body
          description: Login Payload
          required: true
          schema:
            $ref: '#/definitions/Login'
      produces:
        - application/json
      responses:
        '200':
          description: Login Successfully
          schema:
            $ref: '#/definitions/LoginResponse'
        '400':
          description: Invalid Fields
        '500':
          description: Internal Server Error
  /user/signup:
    post:
      tags:
        - User Module
      summary: Signup
      description: API for Signup
      parameters:
        - in: body
          name: body
          description: Signup Payload
          required: true
          schema:
            $ref: '#/definitions/User'
      produces:
        - application/json
      responses:
        '200':
          description: Signup Successfully
          schema:
            $ref: '#/definitions/ApiResponse'
        '400':
          description: Invalid Fields
        '500':
          description: Internal Server Error
  /user/profile:
    post:
      security:
        - Bearer: []
      tags:
        - User Module
      summary: User Profile API
      description: API for fetching a user profile
      #produces:
       # - application/json
      responses:
        '200':
          description: User profile retrieved successully
          schema:
            $ref: '#/definitions/ApiResponse'
        '400':
          description: Invalid Fields
        '500':
          description: Internal Server Error
    put:
      security:
        - Bearer: []
      tags:
        - User Module
      summary: User Profile API
      description: API for updating a user profile
      parameters:
        - in: body
          name: body
          description: Update user profile attributes
          required: true
          schema:
            $ref: '#/definitions/UserProfile'
      produces:
        - application/json
      responses:
        '200':
          description: User profile retrieved successully
          schema:
            $ref: '#/definitions/ApiResponse'
        '400':
          description: Invalid Fields
        '500':
          description: Internal Server Error
#---------------------#  
#------- Ajout -------#
#---------------------#
  /account/{accountID}/transactions:
    get:
      tags:
        - Accounts and Transactions Module
      summary: Account transactions
      description: API for retrieving list of transactions assiocated with an account
      security: 
        - Bearer: []
      parameters:
        - in: path
          name: accountID
          description: ID of an account
          required: true
          type: string
        - in: query
          name: date
          required: true
          description: month to filter transactions
          type: string
          format: YYYY-MM
      responses:
        '200':
          description: All transactions retrieved successfully
          schema: 
            type: array
            items:
              $ref: '#/definitions/TransactionsList'
        '401':
          description: Unauthorized user
        '404': 
          description: Account not found
        '500':
          description: Internal Server Error
  /user/transactions/{transactionId}:
    get:
      security:
        - Bearer: []
      tags:
        - Accounts and Transactions Module
      summary: Get Transaction Details
      description: API to retrieve details of a specific transaction
      parameters:
        - in: path
          name: transactionId
          required: true
          description: ID of the transaction to retrieve details
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: Transaction details retrieved successfully
          schema:
            $ref: "#/definitions/TransactionDetails"
        "404":
          description: Transaction not found
        "500":
          description: Internal Server Error

  /user/transactions/{transactionId}/category:
    post:
      tags:
        - Accounts and Transactions Module
      security:
        - Bearer: []
      summary: Add Category to Transaction
      description: API to add a category to a specific transaction
      parameters:
        - in: path
          name: transactionId
          required: true
          description: ID of the transaction to add the category
          type: string
        - in: body
          name: body
          description: Category payload
          required: true
          schema:
            $ref: "#/definitions/CategoryBody"
      produces:
        - application/json
      responses:
        "200":
          description: Category added successfully
        "400":
          description: Invalid request payload
        "404":
          description: Transaction not found
        "500":
          description: Internal Server Error
    put:
      tags:
        - Accounts and Transactions Module
      security:
        - Bearer: []
      summary: Add Category to Transaction
      description: API to update the category of a specific transaction
      parameters:
        - in: path
          name: transactionId
          required: true
          description: ID of the transaction to update the category for
          type: string
        - in: body
          name: body
          description: Updated category payload
          required: true
          schema:
            $ref: "#/definitions/CategoryBody"
      produces:
        - application/json
      responses:
        "200":
          description: Category updated successfully
        "400":
          description: Invalid request payload
        "404":
          description: Transaction not found
        "500":
          description: Internal Server Error
    delete:
      tags:
        - Accounts and Transactions Module
      security:
        - Bearer: []
      summary: Add Category to Transaction
      description: API to delete the category of a specific transaction
      parameters:
        - in: path
          name: transactionId
          required: true
          description: ID of the transaction to delete the category from
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: Category deleted successfully
        "404":
          description: Transaction not found
        "500":
          description: Internal Server Error
  /transactions/{transactionID}/note:
    post:
      tags:
        - Accounts and Transactions Module
      summary: Add transaction's note
      description: API for adding a note to a transaction
      security: 
        - Bearer: []
      parameters:
        - in: path
          name: transactionID
          description: ID of a transaction
          required: true
          type: string
        - in: body
          name: body
          description: New transaction's note
          required: true
          schema: 
            $ref: '#/definitions/TransactionNote'
      responses:
        '200':
          description: Note added to the transaction successfully
          schema: 
            $ref: '#/definitions/TransactionsList'
        '401':
          description: Unauthorized user
        '404':
          description: Note not created
        '500':
          description: Internal Server Error
    put:
      tags:
        - Accounts and Transactions Module
      summary: Modify transaction's note
      description: API for modifying a note of a transaction
      security: 
        - Bearer: []
      parameters:
        - in: path
          name: transactionID
          description: ID of a transaction
          required: true
          type: string
        - in: body
          name: note
          description: Modify transaction's note
          required: true
          schema: 
            $ref: '#/definitions/TransactionNote'
      responses:
        '200':
          description: Note modified successfully
          schema:
            $ref: '#/definitions/TransactionsList'
        '401':
          description: Unauthorized user
        '404':
          description: Note not modified
        '500':
          description: Internal Server Error
    delete:
      tags:
        - Accounts and Transactions Module
      summary: Delete transaction's note
      description: API for deleting a note of a transaction
      security:
        - Bearer: []
      parameters:
        - in: path
          name: transactionID
          description: ID of a transaction
          required: true
          type: string
      responses:
        '200':
          description: Note deleted successfully
        '401':
          description: Unauthorized user
        '404':
          description: Note not deleted
        '500':
          description: Internal Server Error
#---------------------#  
#---------------------#
#---------------------#
securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header
definitions:
  User:
    properties:
      email:
        type: string
        description: user email
      password:
        type: string
        description: user password
      firstName:
        type: string
        description: user first name
      lastName:
        type: string
        description: user last name
      userName:
        type: string
        description: user public name
  Login:
    properties:
      email:
        type: string
        description: user email
      password:
        type: string
        description: user password
  ApiResponse:
    type: object
    properties:
      status:
        type: integer
      message:
        type: string
      body:
        type: object
        properties:
          id:
            type: string
          email:
            type: string
  LoginResponse:
    type: object
    properties:
      token:
        type: string
  UserProfile:
    type: object
    properties:
      userName:
        type: string
#---------------------#  
#------- Ajout -------#
#---------------------#
  Transactions:
    type: object
    properties:
      transactionID: 
        type: string
        description: transactionId
      transactionDescription:
        type: string
        description: description of transaction
      date:
        type: string
        format: date-time
        description: date of transaction
      amount:
        type: number
        description: transaction amout
      category:
        type: string
        description: name of the category
      note:
        type: string
        description: transaction note
  TransactionsList:
    type: array
    items:
      $ref: "#/definitions/Transactions"
  TransactionDetails:
    type: object
    properties:
      note:
        type: string
        description: transaction note
      transactiontype:
        type: string
        description: transaction type
      category:
        type: string
        description: name of the category transaction 
  TransactionNote:
    type: object
    properties:
      note:
        type: string
        description: The note to be added or updated
  CategoryBody:
    type: object
    properties:
      category:
        type: string
        description: The category to be added or updated
#---------------------#  
#---------------------#
#---------------------#